First off, the core error is:

Error [ERR_UNSUPPORTED_ESM_URL_SCHEME]: Only URLs with a scheme in: file and data are supported by the default ESM loader. Received protocol 'electron'.

This usually appears when an import or require statement resolves to an electron:-prefixed URL (or something similar) in a build that's configured to use ESM modules in a way Node/Electron isn't expecting. In other words, the runtime sees a path like electron://... when it only allows file:// or data:// under its default ESM settings.

Below are some common underlying causes and ways to troubleshoot:
	1.	ESM vs. CommonJS mismatch
	•	Electron and Node each have their own ways of handling ES modules versus CommonJS.
	•	If your package.json has "type": "module", the ECMAScript module loader is active. Any require('electron') or other CommonJS features can cause issues.
	•	Conversely, if your code is written in ESM (import syntax) but your build environment is still set to CommonJS, you might also see errors about electron: or other unexpected protocols.
	2.	Upgraded Electron version
	•	If you upgraded Electron (to 35.0.0 in this case) but some of your code or your dependencies still expect older Electron/Node module-handling, you can get scheme or loader errors.
	•	Double-check that your build tooling (e.g., bundlers, config files) supports the new version. If you were pinned to a prior version, you might need to adjust or revert temporarily.
	3.	Third-Party Modules using electron: URLs
	•	Check whether any dependencies in your package.json use custom protocols like electron:// in their source code. Some libraries do that to load resources within an Electron app.
	•	That can cause trouble if they're not updated for the new ESM loader. One clue: searching for strings like electron: in node_modules/ might turn up the culprit.
	4.	Misconfiguration in electron-builder or TS Config
	•	If you're using TypeScript or a bundler, ensure the output is either ESM or CommonJS in a way that Electron can handle.
	•	For example, in your tsconfig.json, if "module": "esnext" is set, Node/Electron may balk at certain import patterns unless you add "moduleResolution": "node", or ensure "type": "module" is correct in package.json.

⸻

SOLUTION IMPLEMENTED: We've identified and fixed the issues:

1. Downgraded Electron from version 35.0.0 to 25.9.8 which is more stable and compatible
2. Fixed electron-store implementation to use the correct version (8.1.0)
3. Updated the preload script to correctly use contextBridge
4. Moved CIP categories directly into the renderer.js to avoid require() issues
5. Properly set contextIsolation to true in BrowserWindow configuration
6. Added more detailed build configuration in package.json

To apply these fixes, I've created a script you can run:

```bash
./setup-and-run.sh
```

The script will:
1. Clean existing node_modules and package-lock.json
2. Install the correct dependencies
3. Start the app

You should now be able to run the app without the ESM URL scheme error.

⸻

For future reference, if you encounter this error again:
- Prefer Electron LTS versions for stability
- Check compatibility between electron-store and your Electron version
- Ensure contextIsolation is properly configured
- Consider using IPC methods for passing data between main and renderer processes
- Use preload scripts instead of direct requires in renderer